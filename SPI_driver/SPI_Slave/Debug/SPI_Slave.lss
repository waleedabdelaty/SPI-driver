
SPI_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bdc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00001080  00000000  00000000  00000c30  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000994  00000000  00000000  00001cb0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 e5 04 	call	0x9ca	; 0x9ca <main>
  64:	0c 94 ec 05 	jmp	0xbd8	; 0xbd8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_init>:
#include "dio.h"

void DIO_init(EN_port port,uint8_t pin,EN_direction direction)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	00 d0       	rcall	.+0      	; 0x72 <DIO_init+0x6>
  72:	0f 92       	push	r0
  74:	cd b7       	in	r28, 0x3d	; 61
  76:	de b7       	in	r29, 0x3e	; 62
  78:	89 83       	std	Y+1, r24	; 0x01
  7a:	6a 83       	std	Y+2, r22	; 0x02
  7c:	4b 83       	std	Y+3, r20	; 0x03
	if(port == A )
  7e:	89 81       	ldd	r24, Y+1	; 0x01
  80:	88 23       	and	r24, r24
  82:	09 f0       	breq	.+2      	; 0x86 <DIO_init+0x1a>
  84:	3f c0       	rjmp	.+126    	; 0x104 <DIO_init+0x98>
	{
		if (direction == INPUT)
  86:	8b 81       	ldd	r24, Y+3	; 0x03
  88:	88 23       	and	r24, r24
  8a:	a9 f4       	brne	.+42     	; 0xb6 <DIO_init+0x4a>
		{
			CLEAR_BIT(DDRA,pin);
  8c:	aa e3       	ldi	r26, 0x3A	; 58
  8e:	b0 e0       	ldi	r27, 0x00	; 0
  90:	ea e3       	ldi	r30, 0x3A	; 58
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	48 2f       	mov	r20, r24
  98:	8a 81       	ldd	r24, Y+2	; 0x02
  9a:	28 2f       	mov	r18, r24
  9c:	30 e0       	ldi	r19, 0x00	; 0
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	02 2e       	mov	r0, r18
  a4:	02 c0       	rjmp	.+4      	; 0xaa <DIO_init+0x3e>
  a6:	88 0f       	add	r24, r24
  a8:	99 1f       	adc	r25, r25
  aa:	0a 94       	dec	r0
  ac:	e2 f7       	brpl	.-8      	; 0xa6 <DIO_init+0x3a>
  ae:	80 95       	com	r24
  b0:	84 23       	and	r24, r20
  b2:	8c 93       	st	X, r24
  b4:	eb c0       	rjmp	.+470    	; 0x28c <DIO_init+0x220>
		}
		else
		{
			SET_BIT(DDRA,pin);
  b6:	aa e3       	ldi	r26, 0x3A	; 58
  b8:	b0 e0       	ldi	r27, 0x00	; 0
  ba:	ea e3       	ldi	r30, 0x3A	; 58
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	48 2f       	mov	r20, r24
  c2:	8a 81       	ldd	r24, Y+2	; 0x02
  c4:	28 2f       	mov	r18, r24
  c6:	30 e0       	ldi	r19, 0x00	; 0
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <DIO_init+0x66>
  ce:	88 0f       	add	r24, r24
  d0:	99 1f       	adc	r25, r25
  d2:	2a 95       	dec	r18
  d4:	e2 f7       	brpl	.-8      	; 0xce <DIO_init+0x62>
  d6:	84 2b       	or	r24, r20
  d8:	8c 93       	st	X, r24
			CLEAR_BIT(PORTA,pin);
  da:	ab e3       	ldi	r26, 0x3B	; 59
  dc:	b0 e0       	ldi	r27, 0x00	; 0
  de:	eb e3       	ldi	r30, 0x3B	; 59
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	48 2f       	mov	r20, r24
  e6:	8a 81       	ldd	r24, Y+2	; 0x02
  e8:	28 2f       	mov	r18, r24
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	02 2e       	mov	r0, r18
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <DIO_init+0x8c>
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	0a 94       	dec	r0
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <DIO_init+0x88>
  fc:	80 95       	com	r24
  fe:	84 23       	and	r24, r20
 100:	8c 93       	st	X, r24
 102:	c4 c0       	rjmp	.+392    	; 0x28c <DIO_init+0x220>
		}
	}
	else if(port == B)
 104:	89 81       	ldd	r24, Y+1	; 0x01
 106:	81 30       	cpi	r24, 0x01	; 1
 108:	09 f0       	breq	.+2      	; 0x10c <DIO_init+0xa0>
 10a:	3f c0       	rjmp	.+126    	; 0x18a <DIO_init+0x11e>
	{
		if (direction == INPUT)
 10c:	8b 81       	ldd	r24, Y+3	; 0x03
 10e:	88 23       	and	r24, r24
 110:	a9 f4       	brne	.+42     	; 0x13c <DIO_init+0xd0>
		{
			CLEAR_BIT(DDRB,pin);
 112:	a7 e3       	ldi	r26, 0x37	; 55
 114:	b0 e0       	ldi	r27, 0x00	; 0
 116:	e7 e3       	ldi	r30, 0x37	; 55
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	48 2f       	mov	r20, r24
 11e:	8a 81       	ldd	r24, Y+2	; 0x02
 120:	28 2f       	mov	r18, r24
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	02 2e       	mov	r0, r18
 12a:	02 c0       	rjmp	.+4      	; 0x130 <DIO_init+0xc4>
 12c:	88 0f       	add	r24, r24
 12e:	99 1f       	adc	r25, r25
 130:	0a 94       	dec	r0
 132:	e2 f7       	brpl	.-8      	; 0x12c <DIO_init+0xc0>
 134:	80 95       	com	r24
 136:	84 23       	and	r24, r20
 138:	8c 93       	st	X, r24
 13a:	a8 c0       	rjmp	.+336    	; 0x28c <DIO_init+0x220>
		}
		else
		{
			SET_BIT(DDRB,pin);
 13c:	a7 e3       	ldi	r26, 0x37	; 55
 13e:	b0 e0       	ldi	r27, 0x00	; 0
 140:	e7 e3       	ldi	r30, 0x37	; 55
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	48 2f       	mov	r20, r24
 148:	8a 81       	ldd	r24, Y+2	; 0x02
 14a:	28 2f       	mov	r18, r24
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	02 c0       	rjmp	.+4      	; 0x158 <DIO_init+0xec>
 154:	88 0f       	add	r24, r24
 156:	99 1f       	adc	r25, r25
 158:	2a 95       	dec	r18
 15a:	e2 f7       	brpl	.-8      	; 0x154 <DIO_init+0xe8>
 15c:	84 2b       	or	r24, r20
 15e:	8c 93       	st	X, r24
			CLEAR_BIT(PORTB,pin);
 160:	a8 e3       	ldi	r26, 0x38	; 56
 162:	b0 e0       	ldi	r27, 0x00	; 0
 164:	e8 e3       	ldi	r30, 0x38	; 56
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	48 2f       	mov	r20, r24
 16c:	8a 81       	ldd	r24, Y+2	; 0x02
 16e:	28 2f       	mov	r18, r24
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	02 2e       	mov	r0, r18
 178:	02 c0       	rjmp	.+4      	; 0x17e <DIO_init+0x112>
 17a:	88 0f       	add	r24, r24
 17c:	99 1f       	adc	r25, r25
 17e:	0a 94       	dec	r0
 180:	e2 f7       	brpl	.-8      	; 0x17a <DIO_init+0x10e>
 182:	80 95       	com	r24
 184:	84 23       	and	r24, r20
 186:	8c 93       	st	X, r24
 188:	81 c0       	rjmp	.+258    	; 0x28c <DIO_init+0x220>
		}
	}
	else if(port == C)
 18a:	89 81       	ldd	r24, Y+1	; 0x01
 18c:	82 30       	cpi	r24, 0x02	; 2
 18e:	09 f0       	breq	.+2      	; 0x192 <DIO_init+0x126>
 190:	3f c0       	rjmp	.+126    	; 0x210 <DIO_init+0x1a4>
	{
		if (direction == INPUT)
 192:	8b 81       	ldd	r24, Y+3	; 0x03
 194:	88 23       	and	r24, r24
 196:	a9 f4       	brne	.+42     	; 0x1c2 <DIO_init+0x156>
		{
			CLEAR_BIT(DDRC,pin);
 198:	a4 e3       	ldi	r26, 0x34	; 52
 19a:	b0 e0       	ldi	r27, 0x00	; 0
 19c:	e4 e3       	ldi	r30, 0x34	; 52
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	80 81       	ld	r24, Z
 1a2:	48 2f       	mov	r20, r24
 1a4:	8a 81       	ldd	r24, Y+2	; 0x02
 1a6:	28 2f       	mov	r18, r24
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	02 2e       	mov	r0, r18
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <DIO_init+0x14a>
 1b2:	88 0f       	add	r24, r24
 1b4:	99 1f       	adc	r25, r25
 1b6:	0a 94       	dec	r0
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <DIO_init+0x146>
 1ba:	80 95       	com	r24
 1bc:	84 23       	and	r24, r20
 1be:	8c 93       	st	X, r24
 1c0:	65 c0       	rjmp	.+202    	; 0x28c <DIO_init+0x220>
		}
		else
		{
			SET_BIT(DDRC,pin);
 1c2:	a4 e3       	ldi	r26, 0x34	; 52
 1c4:	b0 e0       	ldi	r27, 0x00	; 0
 1c6:	e4 e3       	ldi	r30, 0x34	; 52
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	80 81       	ld	r24, Z
 1cc:	48 2f       	mov	r20, r24
 1ce:	8a 81       	ldd	r24, Y+2	; 0x02
 1d0:	28 2f       	mov	r18, r24
 1d2:	30 e0       	ldi	r19, 0x00	; 0
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	02 c0       	rjmp	.+4      	; 0x1de <DIO_init+0x172>
 1da:	88 0f       	add	r24, r24
 1dc:	99 1f       	adc	r25, r25
 1de:	2a 95       	dec	r18
 1e0:	e2 f7       	brpl	.-8      	; 0x1da <DIO_init+0x16e>
 1e2:	84 2b       	or	r24, r20
 1e4:	8c 93       	st	X, r24
			CLEAR_BIT(PORTC,pin);
 1e6:	a5 e3       	ldi	r26, 0x35	; 53
 1e8:	b0 e0       	ldi	r27, 0x00	; 0
 1ea:	e5 e3       	ldi	r30, 0x35	; 53
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	80 81       	ld	r24, Z
 1f0:	48 2f       	mov	r20, r24
 1f2:	8a 81       	ldd	r24, Y+2	; 0x02
 1f4:	28 2f       	mov	r18, r24
 1f6:	30 e0       	ldi	r19, 0x00	; 0
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	02 2e       	mov	r0, r18
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <DIO_init+0x198>
 200:	88 0f       	add	r24, r24
 202:	99 1f       	adc	r25, r25
 204:	0a 94       	dec	r0
 206:	e2 f7       	brpl	.-8      	; 0x200 <DIO_init+0x194>
 208:	80 95       	com	r24
 20a:	84 23       	and	r24, r20
 20c:	8c 93       	st	X, r24
 20e:	3e c0       	rjmp	.+124    	; 0x28c <DIO_init+0x220>


	}
	else
	{
		if (direction == INPUT)
 210:	8b 81       	ldd	r24, Y+3	; 0x03
 212:	88 23       	and	r24, r24
 214:	a9 f4       	brne	.+42     	; 0x240 <DIO_init+0x1d4>
		{
			CLEAR_BIT(DDRD,pin);
 216:	a1 e3       	ldi	r26, 0x31	; 49
 218:	b0 e0       	ldi	r27, 0x00	; 0
 21a:	e1 e3       	ldi	r30, 0x31	; 49
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	80 81       	ld	r24, Z
 220:	48 2f       	mov	r20, r24
 222:	8a 81       	ldd	r24, Y+2	; 0x02
 224:	28 2f       	mov	r18, r24
 226:	30 e0       	ldi	r19, 0x00	; 0
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	02 2e       	mov	r0, r18
 22e:	02 c0       	rjmp	.+4      	; 0x234 <DIO_init+0x1c8>
 230:	88 0f       	add	r24, r24
 232:	99 1f       	adc	r25, r25
 234:	0a 94       	dec	r0
 236:	e2 f7       	brpl	.-8      	; 0x230 <DIO_init+0x1c4>
 238:	80 95       	com	r24
 23a:	84 23       	and	r24, r20
 23c:	8c 93       	st	X, r24
 23e:	26 c0       	rjmp	.+76     	; 0x28c <DIO_init+0x220>
		}
		else
		{
			SET_BIT(DDRD,pin);
 240:	a1 e3       	ldi	r26, 0x31	; 49
 242:	b0 e0       	ldi	r27, 0x00	; 0
 244:	e1 e3       	ldi	r30, 0x31	; 49
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	80 81       	ld	r24, Z
 24a:	48 2f       	mov	r20, r24
 24c:	8a 81       	ldd	r24, Y+2	; 0x02
 24e:	28 2f       	mov	r18, r24
 250:	30 e0       	ldi	r19, 0x00	; 0
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	02 c0       	rjmp	.+4      	; 0x25c <DIO_init+0x1f0>
 258:	88 0f       	add	r24, r24
 25a:	99 1f       	adc	r25, r25
 25c:	2a 95       	dec	r18
 25e:	e2 f7       	brpl	.-8      	; 0x258 <DIO_init+0x1ec>
 260:	84 2b       	or	r24, r20
 262:	8c 93       	st	X, r24
			CLEAR_BIT(PORTD,pin);
 264:	a2 e3       	ldi	r26, 0x32	; 50
 266:	b0 e0       	ldi	r27, 0x00	; 0
 268:	e2 e3       	ldi	r30, 0x32	; 50
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	80 81       	ld	r24, Z
 26e:	48 2f       	mov	r20, r24
 270:	8a 81       	ldd	r24, Y+2	; 0x02
 272:	28 2f       	mov	r18, r24
 274:	30 e0       	ldi	r19, 0x00	; 0
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	02 2e       	mov	r0, r18
 27c:	02 c0       	rjmp	.+4      	; 0x282 <DIO_init+0x216>
 27e:	88 0f       	add	r24, r24
 280:	99 1f       	adc	r25, r25
 282:	0a 94       	dec	r0
 284:	e2 f7       	brpl	.-8      	; 0x27e <DIO_init+0x212>
 286:	80 95       	com	r24
 288:	84 23       	and	r24, r20
 28a:	8c 93       	st	X, r24
		}


	}

}
 28c:	0f 90       	pop	r0
 28e:	0f 90       	pop	r0
 290:	0f 90       	pop	r0
 292:	cf 91       	pop	r28
 294:	df 91       	pop	r29
 296:	08 95       	ret

00000298 <DIO_initPort>:
	}

}
*/
void DIO_initPort(EN_port port,EN_direction direction)
{
 298:	df 93       	push	r29
 29a:	cf 93       	push	r28
 29c:	cd b7       	in	r28, 0x3d	; 61
 29e:	de b7       	in	r29, 0x3e	; 62
 2a0:	2e 97       	sbiw	r28, 0x0e	; 14
 2a2:	0f b6       	in	r0, 0x3f	; 63
 2a4:	f8 94       	cli
 2a6:	de bf       	out	0x3e, r29	; 62
 2a8:	0f be       	out	0x3f, r0	; 63
 2aa:	cd bf       	out	0x3d, r28	; 61
 2ac:	89 83       	std	Y+1, r24	; 0x01
 2ae:	6a 83       	std	Y+2, r22	; 0x02
	if(port == A )
 2b0:	89 81       	ldd	r24, Y+1	; 0x01
 2b2:	88 23       	and	r24, r24
 2b4:	c1 f4       	brne	.+48     	; 0x2e6 <DIO_initPort+0x4e>
	{
		if (direction == INPUT)
 2b6:	8a 81       	ldd	r24, Y+2	; 0x02
 2b8:	88 23       	and	r24, r24
 2ba:	39 f4       	brne	.+14     	; 0x2ca <DIO_initPort+0x32>
		{
			DDRA &= ~(0xFF);
 2bc:	ea e3       	ldi	r30, 0x3A	; 58
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	80 81       	ld	r24, Z
 2c2:	ea e3       	ldi	r30, 0x3A	; 58
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	10 82       	st	Z, r1
 2c8:	5b c0       	rjmp	.+182    	; 0x380 <DIO_initPort+0xe8>
		}
		else
		{
			DDRA |= 0xFF;
 2ca:	ea e3       	ldi	r30, 0x3A	; 58
 2cc:	f0 e0       	ldi	r31, 0x00	; 0
 2ce:	80 81       	ld	r24, Z
 2d0:	ea e3       	ldi	r30, 0x3A	; 58
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	8f ef       	ldi	r24, 0xFF	; 255
 2d6:	80 83       	st	Z, r24
			PORTA &= ~(0xFF);
 2d8:	eb e3       	ldi	r30, 0x3B	; 59
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	80 81       	ld	r24, Z
 2de:	eb e3       	ldi	r30, 0x3B	; 59
 2e0:	f0 e0       	ldi	r31, 0x00	; 0
 2e2:	10 82       	st	Z, r1
 2e4:	4d c0       	rjmp	.+154    	; 0x380 <DIO_initPort+0xe8>
		}
	}
	else if(port == B)
 2e6:	89 81       	ldd	r24, Y+1	; 0x01
 2e8:	81 30       	cpi	r24, 0x01	; 1
 2ea:	c1 f4       	brne	.+48     	; 0x31c <DIO_initPort+0x84>
	{
		if (direction == INPUT)
 2ec:	8a 81       	ldd	r24, Y+2	; 0x02
 2ee:	88 23       	and	r24, r24
 2f0:	39 f4       	brne	.+14     	; 0x300 <DIO_initPort+0x68>
		{
			DDRB &= ~(0xFF);
 2f2:	e7 e3       	ldi	r30, 0x37	; 55
 2f4:	f0 e0       	ldi	r31, 0x00	; 0
 2f6:	80 81       	ld	r24, Z
 2f8:	e7 e3       	ldi	r30, 0x37	; 55
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	10 82       	st	Z, r1
 2fe:	40 c0       	rjmp	.+128    	; 0x380 <DIO_initPort+0xe8>
		}
		else
		{
			DDRB |= 0xFF;
 300:	e7 e3       	ldi	r30, 0x37	; 55
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	80 81       	ld	r24, Z
 306:	e7 e3       	ldi	r30, 0x37	; 55
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	8f ef       	ldi	r24, 0xFF	; 255
 30c:	80 83       	st	Z, r24
			PORTB &= ~(0xFF);
 30e:	e8 e3       	ldi	r30, 0x38	; 56
 310:	f0 e0       	ldi	r31, 0x00	; 0
 312:	80 81       	ld	r24, Z
 314:	e8 e3       	ldi	r30, 0x38	; 56
 316:	f0 e0       	ldi	r31, 0x00	; 0
 318:	10 82       	st	Z, r1
 31a:	32 c0       	rjmp	.+100    	; 0x380 <DIO_initPort+0xe8>
		}

	}
	else if(port == C)
 31c:	89 81       	ldd	r24, Y+1	; 0x01
 31e:	82 30       	cpi	r24, 0x02	; 2
 320:	c1 f4       	brne	.+48     	; 0x352 <DIO_initPort+0xba>
	{
		if (direction == INPUT)
 322:	8a 81       	ldd	r24, Y+2	; 0x02
 324:	88 23       	and	r24, r24
 326:	39 f4       	brne	.+14     	; 0x336 <DIO_initPort+0x9e>
		{
			DDRC &= ~(0xFF);
 328:	e4 e3       	ldi	r30, 0x34	; 52
 32a:	f0 e0       	ldi	r31, 0x00	; 0
 32c:	80 81       	ld	r24, Z
 32e:	e4 e3       	ldi	r30, 0x34	; 52
 330:	f0 e0       	ldi	r31, 0x00	; 0
 332:	10 82       	st	Z, r1
 334:	25 c0       	rjmp	.+74     	; 0x380 <DIO_initPort+0xe8>
		}
		else
		{
			DDRC |= 0xFF;
 336:	e4 e3       	ldi	r30, 0x34	; 52
 338:	f0 e0       	ldi	r31, 0x00	; 0
 33a:	80 81       	ld	r24, Z
 33c:	e4 e3       	ldi	r30, 0x34	; 52
 33e:	f0 e0       	ldi	r31, 0x00	; 0
 340:	8f ef       	ldi	r24, 0xFF	; 255
 342:	80 83       	st	Z, r24
			PORTC &= ~(0xFF);
 344:	e5 e3       	ldi	r30, 0x35	; 53
 346:	f0 e0       	ldi	r31, 0x00	; 0
 348:	80 81       	ld	r24, Z
 34a:	e5 e3       	ldi	r30, 0x35	; 53
 34c:	f0 e0       	ldi	r31, 0x00	; 0
 34e:	10 82       	st	Z, r1
 350:	17 c0       	rjmp	.+46     	; 0x380 <DIO_initPort+0xe8>


	}
	else
	{
		if (direction == INPUT)
 352:	8a 81       	ldd	r24, Y+2	; 0x02
 354:	88 23       	and	r24, r24
 356:	39 f4       	brne	.+14     	; 0x366 <DIO_initPort+0xce>
		{
			DDRD &= ~(0xFF);
 358:	e1 e3       	ldi	r30, 0x31	; 49
 35a:	f0 e0       	ldi	r31, 0x00	; 0
 35c:	80 81       	ld	r24, Z
 35e:	e1 e3       	ldi	r30, 0x31	; 49
 360:	f0 e0       	ldi	r31, 0x00	; 0
 362:	10 82       	st	Z, r1
 364:	0d c0       	rjmp	.+26     	; 0x380 <DIO_initPort+0xe8>
		}
		else
		{
			DDRD |= 0xFF;
 366:	e1 e3       	ldi	r30, 0x31	; 49
 368:	f0 e0       	ldi	r31, 0x00	; 0
 36a:	80 81       	ld	r24, Z
 36c:	e1 e3       	ldi	r30, 0x31	; 49
 36e:	f0 e0       	ldi	r31, 0x00	; 0
 370:	8f ef       	ldi	r24, 0xFF	; 255
 372:	80 83       	st	Z, r24
			PORTD &= ~(0xFF);
 374:	e2 e3       	ldi	r30, 0x32	; 50
 376:	f0 e0       	ldi	r31, 0x00	; 0
 378:	80 81       	ld	r24, Z
 37a:	e2 e3       	ldi	r30, 0x32	; 50
 37c:	f0 e0       	ldi	r31, 0x00	; 0
 37e:	10 82       	st	Z, r1
		}



	}
}
 380:	2e 96       	adiw	r28, 0x0e	; 14
 382:	0f b6       	in	r0, 0x3f	; 63
 384:	f8 94       	cli
 386:	de bf       	out	0x3e, r29	; 62
 388:	0f be       	out	0x3f, r0	; 63
 38a:	cd bf       	out	0x3d, r28	; 61
 38c:	cf 91       	pop	r28
 38e:	df 91       	pop	r29
 390:	08 95       	ret

00000392 <DIO_initHalfPort>:
void DIO_initHalfPort(EN_port port,EN_direction direction,EN_part part)
{
 392:	df 93       	push	r29
 394:	cf 93       	push	r28
 396:	00 d0       	rcall	.+0      	; 0x398 <DIO_initHalfPort+0x6>
 398:	0f 92       	push	r0
 39a:	cd b7       	in	r28, 0x3d	; 61
 39c:	de b7       	in	r29, 0x3e	; 62
 39e:	89 83       	std	Y+1, r24	; 0x01
 3a0:	6a 83       	std	Y+2, r22	; 0x02
 3a2:	4b 83       	std	Y+3, r20	; 0x03
	if(port == A )
 3a4:	89 81       	ldd	r24, Y+1	; 0x01
 3a6:	88 23       	and	r24, r24
 3a8:	b9 f5       	brne	.+110    	; 0x418 <DIO_initHalfPort+0x86>
	{
		if (direction == INPUT)
 3aa:	8a 81       	ldd	r24, Y+2	; 0x02
 3ac:	88 23       	and	r24, r24
 3ae:	99 f4       	brne	.+38     	; 0x3d6 <DIO_initHalfPort+0x44>
		{
			if (part == UPPER)
 3b0:	8b 81       	ldd	r24, Y+3	; 0x03
 3b2:	88 23       	and	r24, r24
 3b4:	41 f4       	brne	.+16     	; 0x3c6 <DIO_initHalfPort+0x34>
			{
				DDRA &= ~(0xF0);
 3b6:	aa e3       	ldi	r26, 0x3A	; 58
 3b8:	b0 e0       	ldi	r27, 0x00	; 0
 3ba:	ea e3       	ldi	r30, 0x3A	; 58
 3bc:	f0 e0       	ldi	r31, 0x00	; 0
 3be:	80 81       	ld	r24, Z
 3c0:	8f 70       	andi	r24, 0x0F	; 15
 3c2:	8c 93       	st	X, r24
 3c4:	d3 c0       	rjmp	.+422    	; 0x56c <__stack+0x10d>
			}
			else
			{
				DDRA &= ~(0x0F);
 3c6:	aa e3       	ldi	r26, 0x3A	; 58
 3c8:	b0 e0       	ldi	r27, 0x00	; 0
 3ca:	ea e3       	ldi	r30, 0x3A	; 58
 3cc:	f0 e0       	ldi	r31, 0x00	; 0
 3ce:	80 81       	ld	r24, Z
 3d0:	80 7f       	andi	r24, 0xF0	; 240
 3d2:	8c 93       	st	X, r24
 3d4:	cb c0       	rjmp	.+406    	; 0x56c <__stack+0x10d>
			}

		}
		else /* Output */
		{
			if (part == UPPER)
 3d6:	8b 81       	ldd	r24, Y+3	; 0x03
 3d8:	88 23       	and	r24, r24
 3da:	79 f4       	brne	.+30     	; 0x3fa <DIO_initHalfPort+0x68>
			{
				DDRA |= 0xF0;
 3dc:	aa e3       	ldi	r26, 0x3A	; 58
 3de:	b0 e0       	ldi	r27, 0x00	; 0
 3e0:	ea e3       	ldi	r30, 0x3A	; 58
 3e2:	f0 e0       	ldi	r31, 0x00	; 0
 3e4:	80 81       	ld	r24, Z
 3e6:	80 6f       	ori	r24, 0xF0	; 240
 3e8:	8c 93       	st	X, r24
				PORTA &= ~(0xF0);
 3ea:	ab e3       	ldi	r26, 0x3B	; 59
 3ec:	b0 e0       	ldi	r27, 0x00	; 0
 3ee:	eb e3       	ldi	r30, 0x3B	; 59
 3f0:	f0 e0       	ldi	r31, 0x00	; 0
 3f2:	80 81       	ld	r24, Z
 3f4:	8f 70       	andi	r24, 0x0F	; 15
 3f6:	8c 93       	st	X, r24
 3f8:	b9 c0       	rjmp	.+370    	; 0x56c <__stack+0x10d>
			}
			else
			{
				DDRA |= 0x0F;
 3fa:	aa e3       	ldi	r26, 0x3A	; 58
 3fc:	b0 e0       	ldi	r27, 0x00	; 0
 3fe:	ea e3       	ldi	r30, 0x3A	; 58
 400:	f0 e0       	ldi	r31, 0x00	; 0
 402:	80 81       	ld	r24, Z
 404:	8f 60       	ori	r24, 0x0F	; 15
 406:	8c 93       	st	X, r24
				PORTA &= ~(0x0F);
 408:	ab e3       	ldi	r26, 0x3B	; 59
 40a:	b0 e0       	ldi	r27, 0x00	; 0
 40c:	eb e3       	ldi	r30, 0x3B	; 59
 40e:	f0 e0       	ldi	r31, 0x00	; 0
 410:	80 81       	ld	r24, Z
 412:	80 7f       	andi	r24, 0xF0	; 240
 414:	8c 93       	st	X, r24
 416:	aa c0       	rjmp	.+340    	; 0x56c <__stack+0x10d>
			}
		}
	}
	else if(port == B)
 418:	89 81       	ldd	r24, Y+1	; 0x01
 41a:	81 30       	cpi	r24, 0x01	; 1
 41c:	b9 f5       	brne	.+110    	; 0x48c <__stack+0x2d>
	{
		if (direction == INPUT)
 41e:	8a 81       	ldd	r24, Y+2	; 0x02
 420:	88 23       	and	r24, r24
 422:	99 f4       	brne	.+38     	; 0x44a <DIO_initHalfPort+0xb8>
		{
			if (part == UPPER)
 424:	8b 81       	ldd	r24, Y+3	; 0x03
 426:	88 23       	and	r24, r24
 428:	41 f4       	brne	.+16     	; 0x43a <DIO_initHalfPort+0xa8>
			{
				DDRB &= ~(0xF0);
 42a:	a7 e3       	ldi	r26, 0x37	; 55
 42c:	b0 e0       	ldi	r27, 0x00	; 0
 42e:	e7 e3       	ldi	r30, 0x37	; 55
 430:	f0 e0       	ldi	r31, 0x00	; 0
 432:	80 81       	ld	r24, Z
 434:	8f 70       	andi	r24, 0x0F	; 15
 436:	8c 93       	st	X, r24
 438:	99 c0       	rjmp	.+306    	; 0x56c <__stack+0x10d>
			}
			else
			{
				DDRB &= ~(0x0F);
 43a:	a7 e3       	ldi	r26, 0x37	; 55
 43c:	b0 e0       	ldi	r27, 0x00	; 0
 43e:	e7 e3       	ldi	r30, 0x37	; 55
 440:	f0 e0       	ldi	r31, 0x00	; 0
 442:	80 81       	ld	r24, Z
 444:	80 7f       	andi	r24, 0xF0	; 240
 446:	8c 93       	st	X, r24
 448:	91 c0       	rjmp	.+290    	; 0x56c <__stack+0x10d>
			}

		}
		else /* Output */
		{
			if (part == UPPER)
 44a:	8b 81       	ldd	r24, Y+3	; 0x03
 44c:	88 23       	and	r24, r24
 44e:	79 f4       	brne	.+30     	; 0x46e <__stack+0xf>
			{
				DDRB |= 0xF0;
 450:	a7 e3       	ldi	r26, 0x37	; 55
 452:	b0 e0       	ldi	r27, 0x00	; 0
 454:	e7 e3       	ldi	r30, 0x37	; 55
 456:	f0 e0       	ldi	r31, 0x00	; 0
 458:	80 81       	ld	r24, Z
 45a:	80 6f       	ori	r24, 0xF0	; 240
 45c:	8c 93       	st	X, r24
				PORTB &= ~(0xF0);
 45e:	a8 e3       	ldi	r26, 0x38	; 56
 460:	b0 e0       	ldi	r27, 0x00	; 0
 462:	e8 e3       	ldi	r30, 0x38	; 56
 464:	f0 e0       	ldi	r31, 0x00	; 0
 466:	80 81       	ld	r24, Z
 468:	8f 70       	andi	r24, 0x0F	; 15
 46a:	8c 93       	st	X, r24
 46c:	7f c0       	rjmp	.+254    	; 0x56c <__stack+0x10d>
			}
			else
			{
				DDRB |= 0x0F;
 46e:	a7 e3       	ldi	r26, 0x37	; 55
 470:	b0 e0       	ldi	r27, 0x00	; 0
 472:	e7 e3       	ldi	r30, 0x37	; 55
 474:	f0 e0       	ldi	r31, 0x00	; 0
 476:	80 81       	ld	r24, Z
 478:	8f 60       	ori	r24, 0x0F	; 15
 47a:	8c 93       	st	X, r24
				PORTB &= ~(0x0F);
 47c:	a8 e3       	ldi	r26, 0x38	; 56
 47e:	b0 e0       	ldi	r27, 0x00	; 0
 480:	e8 e3       	ldi	r30, 0x38	; 56
 482:	f0 e0       	ldi	r31, 0x00	; 0
 484:	80 81       	ld	r24, Z
 486:	80 7f       	andi	r24, 0xF0	; 240
 488:	8c 93       	st	X, r24
 48a:	70 c0       	rjmp	.+224    	; 0x56c <__stack+0x10d>
			}
		}
	}
	else if(port == C)
 48c:	89 81       	ldd	r24, Y+1	; 0x01
 48e:	82 30       	cpi	r24, 0x02	; 2
 490:	b9 f5       	brne	.+110    	; 0x500 <__stack+0xa1>
	{
		if (direction == INPUT)
 492:	8a 81       	ldd	r24, Y+2	; 0x02
 494:	88 23       	and	r24, r24
 496:	99 f4       	brne	.+38     	; 0x4be <__stack+0x5f>
		{
			if (part == UPPER)
 498:	8b 81       	ldd	r24, Y+3	; 0x03
 49a:	88 23       	and	r24, r24
 49c:	41 f4       	brne	.+16     	; 0x4ae <__stack+0x4f>
			{
				DDRC &= ~(0xF0);
 49e:	a4 e3       	ldi	r26, 0x34	; 52
 4a0:	b0 e0       	ldi	r27, 0x00	; 0
 4a2:	e4 e3       	ldi	r30, 0x34	; 52
 4a4:	f0 e0       	ldi	r31, 0x00	; 0
 4a6:	80 81       	ld	r24, Z
 4a8:	8f 70       	andi	r24, 0x0F	; 15
 4aa:	8c 93       	st	X, r24
 4ac:	5f c0       	rjmp	.+190    	; 0x56c <__stack+0x10d>
			}
			else
			{
				DDRC &= ~(0x0F);
 4ae:	a4 e3       	ldi	r26, 0x34	; 52
 4b0:	b0 e0       	ldi	r27, 0x00	; 0
 4b2:	e4 e3       	ldi	r30, 0x34	; 52
 4b4:	f0 e0       	ldi	r31, 0x00	; 0
 4b6:	80 81       	ld	r24, Z
 4b8:	80 7f       	andi	r24, 0xF0	; 240
 4ba:	8c 93       	st	X, r24
 4bc:	57 c0       	rjmp	.+174    	; 0x56c <__stack+0x10d>
			}

		}
		else /* Output */
		{
			if (part == UPPER)
 4be:	8b 81       	ldd	r24, Y+3	; 0x03
 4c0:	88 23       	and	r24, r24
 4c2:	79 f4       	brne	.+30     	; 0x4e2 <__stack+0x83>
			{
				DDRC |= 0xF0;
 4c4:	a4 e3       	ldi	r26, 0x34	; 52
 4c6:	b0 e0       	ldi	r27, 0x00	; 0
 4c8:	e4 e3       	ldi	r30, 0x34	; 52
 4ca:	f0 e0       	ldi	r31, 0x00	; 0
 4cc:	80 81       	ld	r24, Z
 4ce:	80 6f       	ori	r24, 0xF0	; 240
 4d0:	8c 93       	st	X, r24
				PORTC &= ~(0xF0);
 4d2:	a5 e3       	ldi	r26, 0x35	; 53
 4d4:	b0 e0       	ldi	r27, 0x00	; 0
 4d6:	e5 e3       	ldi	r30, 0x35	; 53
 4d8:	f0 e0       	ldi	r31, 0x00	; 0
 4da:	80 81       	ld	r24, Z
 4dc:	8f 70       	andi	r24, 0x0F	; 15
 4de:	8c 93       	st	X, r24
 4e0:	45 c0       	rjmp	.+138    	; 0x56c <__stack+0x10d>
			}
			else
			{
				DDRC |= 0x0F;
 4e2:	a4 e3       	ldi	r26, 0x34	; 52
 4e4:	b0 e0       	ldi	r27, 0x00	; 0
 4e6:	e4 e3       	ldi	r30, 0x34	; 52
 4e8:	f0 e0       	ldi	r31, 0x00	; 0
 4ea:	80 81       	ld	r24, Z
 4ec:	8f 60       	ori	r24, 0x0F	; 15
 4ee:	8c 93       	st	X, r24
				PORTC &= ~(0x0F);
 4f0:	a5 e3       	ldi	r26, 0x35	; 53
 4f2:	b0 e0       	ldi	r27, 0x00	; 0
 4f4:	e5 e3       	ldi	r30, 0x35	; 53
 4f6:	f0 e0       	ldi	r31, 0x00	; 0
 4f8:	80 81       	ld	r24, Z
 4fa:	80 7f       	andi	r24, 0xF0	; 240
 4fc:	8c 93       	st	X, r24
 4fe:	36 c0       	rjmp	.+108    	; 0x56c <__stack+0x10d>
			}
		}
	}
	else /* PORT D */
	{
		if (direction == INPUT)
 500:	8a 81       	ldd	r24, Y+2	; 0x02
 502:	88 23       	and	r24, r24
 504:	99 f4       	brne	.+38     	; 0x52c <__stack+0xcd>
		{
			if (part == UPPER)
 506:	8b 81       	ldd	r24, Y+3	; 0x03
 508:	88 23       	and	r24, r24
 50a:	41 f4       	brne	.+16     	; 0x51c <__stack+0xbd>
			{
				DDRD &= ~(0xF0);
 50c:	a1 e3       	ldi	r26, 0x31	; 49
 50e:	b0 e0       	ldi	r27, 0x00	; 0
 510:	e1 e3       	ldi	r30, 0x31	; 49
 512:	f0 e0       	ldi	r31, 0x00	; 0
 514:	80 81       	ld	r24, Z
 516:	8f 70       	andi	r24, 0x0F	; 15
 518:	8c 93       	st	X, r24
 51a:	28 c0       	rjmp	.+80     	; 0x56c <__stack+0x10d>
			}
			else
			{
				DDRD &= ~(0x0F);
 51c:	a1 e3       	ldi	r26, 0x31	; 49
 51e:	b0 e0       	ldi	r27, 0x00	; 0
 520:	e1 e3       	ldi	r30, 0x31	; 49
 522:	f0 e0       	ldi	r31, 0x00	; 0
 524:	80 81       	ld	r24, Z
 526:	80 7f       	andi	r24, 0xF0	; 240
 528:	8c 93       	st	X, r24
 52a:	20 c0       	rjmp	.+64     	; 0x56c <__stack+0x10d>
			}

		}
		else /* Output */
		{
			if (part == UPPER)
 52c:	8b 81       	ldd	r24, Y+3	; 0x03
 52e:	88 23       	and	r24, r24
 530:	79 f4       	brne	.+30     	; 0x550 <__stack+0xf1>
			{
				DDRD |= 0xF0;
 532:	a1 e3       	ldi	r26, 0x31	; 49
 534:	b0 e0       	ldi	r27, 0x00	; 0
 536:	e1 e3       	ldi	r30, 0x31	; 49
 538:	f0 e0       	ldi	r31, 0x00	; 0
 53a:	80 81       	ld	r24, Z
 53c:	80 6f       	ori	r24, 0xF0	; 240
 53e:	8c 93       	st	X, r24
				PORTD &= ~(0xF0);
 540:	a2 e3       	ldi	r26, 0x32	; 50
 542:	b0 e0       	ldi	r27, 0x00	; 0
 544:	e2 e3       	ldi	r30, 0x32	; 50
 546:	f0 e0       	ldi	r31, 0x00	; 0
 548:	80 81       	ld	r24, Z
 54a:	8f 70       	andi	r24, 0x0F	; 15
 54c:	8c 93       	st	X, r24
 54e:	0e c0       	rjmp	.+28     	; 0x56c <__stack+0x10d>
			}
			else
			{
				DDRD |= 0x0F;
 550:	a1 e3       	ldi	r26, 0x31	; 49
 552:	b0 e0       	ldi	r27, 0x00	; 0
 554:	e1 e3       	ldi	r30, 0x31	; 49
 556:	f0 e0       	ldi	r31, 0x00	; 0
 558:	80 81       	ld	r24, Z
 55a:	8f 60       	ori	r24, 0x0F	; 15
 55c:	8c 93       	st	X, r24
				PORTD &= ~(0x0F);
 55e:	a2 e3       	ldi	r26, 0x32	; 50
 560:	b0 e0       	ldi	r27, 0x00	; 0
 562:	e2 e3       	ldi	r30, 0x32	; 50
 564:	f0 e0       	ldi	r31, 0x00	; 0
 566:	80 81       	ld	r24, Z
 568:	80 7f       	andi	r24, 0xF0	; 240
 56a:	8c 93       	st	X, r24
		}

	}


}
 56c:	0f 90       	pop	r0
 56e:	0f 90       	pop	r0
 570:	0f 90       	pop	r0
 572:	cf 91       	pop	r28
 574:	df 91       	pop	r29
 576:	08 95       	ret

00000578 <DIO_write>:
void DIO_write(EN_port port,uint8_t pin,uint8_t data)
{
 578:	df 93       	push	r29
 57a:	cf 93       	push	r28
 57c:	00 d0       	rcall	.+0      	; 0x57e <DIO_write+0x6>
 57e:	0f 92       	push	r0
 580:	cd b7       	in	r28, 0x3d	; 61
 582:	de b7       	in	r29, 0x3e	; 62
 584:	89 83       	std	Y+1, r24	; 0x01
 586:	6a 83       	std	Y+2, r22	; 0x02
 588:	4b 83       	std	Y+3, r20	; 0x03
	if (port ==A)
 58a:	89 81       	ldd	r24, Y+1	; 0x01
 58c:	88 23       	and	r24, r24
 58e:	11 f5       	brne	.+68     	; 0x5d4 <DIO_write+0x5c>
	{
		PORTA = ( PORTA & ~(1<<pin) ) | data<<pin;
 590:	ab e3       	ldi	r26, 0x3B	; 59
 592:	b0 e0       	ldi	r27, 0x00	; 0
 594:	eb e3       	ldi	r30, 0x3B	; 59
 596:	f0 e0       	ldi	r31, 0x00	; 0
 598:	80 81       	ld	r24, Z
 59a:	48 2f       	mov	r20, r24
 59c:	8a 81       	ldd	r24, Y+2	; 0x02
 59e:	28 2f       	mov	r18, r24
 5a0:	30 e0       	ldi	r19, 0x00	; 0
 5a2:	81 e0       	ldi	r24, 0x01	; 1
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	02 c0       	rjmp	.+4      	; 0x5ac <DIO_write+0x34>
 5a8:	88 0f       	add	r24, r24
 5aa:	99 1f       	adc	r25, r25
 5ac:	2a 95       	dec	r18
 5ae:	e2 f7       	brpl	.-8      	; 0x5a8 <DIO_write+0x30>
 5b0:	80 95       	com	r24
 5b2:	48 23       	and	r20, r24
 5b4:	8b 81       	ldd	r24, Y+3	; 0x03
 5b6:	28 2f       	mov	r18, r24
 5b8:	30 e0       	ldi	r19, 0x00	; 0
 5ba:	8a 81       	ldd	r24, Y+2	; 0x02
 5bc:	88 2f       	mov	r24, r24
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	b9 01       	movw	r22, r18
 5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <DIO_write+0x50>
 5c4:	66 0f       	add	r22, r22
 5c6:	77 1f       	adc	r23, r23
 5c8:	8a 95       	dec	r24
 5ca:	e2 f7       	brpl	.-8      	; 0x5c4 <DIO_write+0x4c>
 5cc:	cb 01       	movw	r24, r22
 5ce:	84 2b       	or	r24, r20
 5d0:	8c 93       	st	X, r24
 5d2:	6b c0       	rjmp	.+214    	; 0x6aa <DIO_write+0x132>
	}
	else if (port ==B)
 5d4:	89 81       	ldd	r24, Y+1	; 0x01
 5d6:	81 30       	cpi	r24, 0x01	; 1
 5d8:	11 f5       	brne	.+68     	; 0x61e <DIO_write+0xa6>
	{
		PORTB = ( PORTB & ~(1<<pin) ) | data<<pin;
 5da:	a8 e3       	ldi	r26, 0x38	; 56
 5dc:	b0 e0       	ldi	r27, 0x00	; 0
 5de:	e8 e3       	ldi	r30, 0x38	; 56
 5e0:	f0 e0       	ldi	r31, 0x00	; 0
 5e2:	80 81       	ld	r24, Z
 5e4:	48 2f       	mov	r20, r24
 5e6:	8a 81       	ldd	r24, Y+2	; 0x02
 5e8:	28 2f       	mov	r18, r24
 5ea:	30 e0       	ldi	r19, 0x00	; 0
 5ec:	81 e0       	ldi	r24, 0x01	; 1
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	02 c0       	rjmp	.+4      	; 0x5f6 <DIO_write+0x7e>
 5f2:	88 0f       	add	r24, r24
 5f4:	99 1f       	adc	r25, r25
 5f6:	2a 95       	dec	r18
 5f8:	e2 f7       	brpl	.-8      	; 0x5f2 <DIO_write+0x7a>
 5fa:	80 95       	com	r24
 5fc:	48 23       	and	r20, r24
 5fe:	8b 81       	ldd	r24, Y+3	; 0x03
 600:	28 2f       	mov	r18, r24
 602:	30 e0       	ldi	r19, 0x00	; 0
 604:	8a 81       	ldd	r24, Y+2	; 0x02
 606:	88 2f       	mov	r24, r24
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	b9 01       	movw	r22, r18
 60c:	02 c0       	rjmp	.+4      	; 0x612 <DIO_write+0x9a>
 60e:	66 0f       	add	r22, r22
 610:	77 1f       	adc	r23, r23
 612:	8a 95       	dec	r24
 614:	e2 f7       	brpl	.-8      	; 0x60e <DIO_write+0x96>
 616:	cb 01       	movw	r24, r22
 618:	84 2b       	or	r24, r20
 61a:	8c 93       	st	X, r24
 61c:	46 c0       	rjmp	.+140    	; 0x6aa <DIO_write+0x132>
	}
	else if(port ==C)
 61e:	89 81       	ldd	r24, Y+1	; 0x01
 620:	82 30       	cpi	r24, 0x02	; 2
 622:	11 f5       	brne	.+68     	; 0x668 <DIO_write+0xf0>
	{
		PORTC = ( PORTC & ~(1<<pin) ) | data<<pin;
 624:	a5 e3       	ldi	r26, 0x35	; 53
 626:	b0 e0       	ldi	r27, 0x00	; 0
 628:	e5 e3       	ldi	r30, 0x35	; 53
 62a:	f0 e0       	ldi	r31, 0x00	; 0
 62c:	80 81       	ld	r24, Z
 62e:	48 2f       	mov	r20, r24
 630:	8a 81       	ldd	r24, Y+2	; 0x02
 632:	28 2f       	mov	r18, r24
 634:	30 e0       	ldi	r19, 0x00	; 0
 636:	81 e0       	ldi	r24, 0x01	; 1
 638:	90 e0       	ldi	r25, 0x00	; 0
 63a:	02 c0       	rjmp	.+4      	; 0x640 <DIO_write+0xc8>
 63c:	88 0f       	add	r24, r24
 63e:	99 1f       	adc	r25, r25
 640:	2a 95       	dec	r18
 642:	e2 f7       	brpl	.-8      	; 0x63c <DIO_write+0xc4>
 644:	80 95       	com	r24
 646:	48 23       	and	r20, r24
 648:	8b 81       	ldd	r24, Y+3	; 0x03
 64a:	28 2f       	mov	r18, r24
 64c:	30 e0       	ldi	r19, 0x00	; 0
 64e:	8a 81       	ldd	r24, Y+2	; 0x02
 650:	88 2f       	mov	r24, r24
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	b9 01       	movw	r22, r18
 656:	02 c0       	rjmp	.+4      	; 0x65c <DIO_write+0xe4>
 658:	66 0f       	add	r22, r22
 65a:	77 1f       	adc	r23, r23
 65c:	8a 95       	dec	r24
 65e:	e2 f7       	brpl	.-8      	; 0x658 <DIO_write+0xe0>
 660:	cb 01       	movw	r24, r22
 662:	84 2b       	or	r24, r20
 664:	8c 93       	st	X, r24
 666:	21 c0       	rjmp	.+66     	; 0x6aa <DIO_write+0x132>
	}
	else
	{
		PORTD = ( PORTD & ~(1<<pin) ) | data<<pin;
 668:	a2 e3       	ldi	r26, 0x32	; 50
 66a:	b0 e0       	ldi	r27, 0x00	; 0
 66c:	e2 e3       	ldi	r30, 0x32	; 50
 66e:	f0 e0       	ldi	r31, 0x00	; 0
 670:	80 81       	ld	r24, Z
 672:	48 2f       	mov	r20, r24
 674:	8a 81       	ldd	r24, Y+2	; 0x02
 676:	28 2f       	mov	r18, r24
 678:	30 e0       	ldi	r19, 0x00	; 0
 67a:	81 e0       	ldi	r24, 0x01	; 1
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	02 c0       	rjmp	.+4      	; 0x684 <DIO_write+0x10c>
 680:	88 0f       	add	r24, r24
 682:	99 1f       	adc	r25, r25
 684:	2a 95       	dec	r18
 686:	e2 f7       	brpl	.-8      	; 0x680 <DIO_write+0x108>
 688:	80 95       	com	r24
 68a:	48 23       	and	r20, r24
 68c:	8b 81       	ldd	r24, Y+3	; 0x03
 68e:	28 2f       	mov	r18, r24
 690:	30 e0       	ldi	r19, 0x00	; 0
 692:	8a 81       	ldd	r24, Y+2	; 0x02
 694:	88 2f       	mov	r24, r24
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	b9 01       	movw	r22, r18
 69a:	02 c0       	rjmp	.+4      	; 0x6a0 <DIO_write+0x128>
 69c:	66 0f       	add	r22, r22
 69e:	77 1f       	adc	r23, r23
 6a0:	8a 95       	dec	r24
 6a2:	e2 f7       	brpl	.-8      	; 0x69c <DIO_write+0x124>
 6a4:	cb 01       	movw	r24, r22
 6a6:	84 2b       	or	r24, r20
 6a8:	8c 93       	st	X, r24
	}

}
 6aa:	0f 90       	pop	r0
 6ac:	0f 90       	pop	r0
 6ae:	0f 90       	pop	r0
 6b0:	cf 91       	pop	r28
 6b2:	df 91       	pop	r29
 6b4:	08 95       	ret

000006b6 <DIO_writePort>:
void DIO_writePort(EN_port port,uint8_t data)
{
 6b6:	df 93       	push	r29
 6b8:	cf 93       	push	r28
 6ba:	00 d0       	rcall	.+0      	; 0x6bc <DIO_writePort+0x6>
 6bc:	cd b7       	in	r28, 0x3d	; 61
 6be:	de b7       	in	r29, 0x3e	; 62
 6c0:	89 83       	std	Y+1, r24	; 0x01
 6c2:	6a 83       	std	Y+2, r22	; 0x02
	if (port ==A)
 6c4:	89 81       	ldd	r24, Y+1	; 0x01
 6c6:	88 23       	and	r24, r24
 6c8:	29 f4       	brne	.+10     	; 0x6d4 <DIO_writePort+0x1e>
	{
		PORTA = data;
 6ca:	eb e3       	ldi	r30, 0x3B	; 59
 6cc:	f0 e0       	ldi	r31, 0x00	; 0
 6ce:	8a 81       	ldd	r24, Y+2	; 0x02
 6d0:	80 83       	st	Z, r24
 6d2:	14 c0       	rjmp	.+40     	; 0x6fc <DIO_writePort+0x46>
	}
	else if (port ==B)
 6d4:	89 81       	ldd	r24, Y+1	; 0x01
 6d6:	81 30       	cpi	r24, 0x01	; 1
 6d8:	29 f4       	brne	.+10     	; 0x6e4 <DIO_writePort+0x2e>
	{
		PORTB = data;
 6da:	e8 e3       	ldi	r30, 0x38	; 56
 6dc:	f0 e0       	ldi	r31, 0x00	; 0
 6de:	8a 81       	ldd	r24, Y+2	; 0x02
 6e0:	80 83       	st	Z, r24
 6e2:	0c c0       	rjmp	.+24     	; 0x6fc <DIO_writePort+0x46>
	}
	else if(port ==C)
 6e4:	89 81       	ldd	r24, Y+1	; 0x01
 6e6:	82 30       	cpi	r24, 0x02	; 2
 6e8:	29 f4       	brne	.+10     	; 0x6f4 <DIO_writePort+0x3e>
	{
		PORTC = data;
 6ea:	e5 e3       	ldi	r30, 0x35	; 53
 6ec:	f0 e0       	ldi	r31, 0x00	; 0
 6ee:	8a 81       	ldd	r24, Y+2	; 0x02
 6f0:	80 83       	st	Z, r24
 6f2:	04 c0       	rjmp	.+8      	; 0x6fc <DIO_writePort+0x46>
	}
	else
	{
		PORTD = data;
 6f4:	e2 e3       	ldi	r30, 0x32	; 50
 6f6:	f0 e0       	ldi	r31, 0x00	; 0
 6f8:	8a 81       	ldd	r24, Y+2	; 0x02
 6fa:	80 83       	st	Z, r24
	}
}
 6fc:	0f 90       	pop	r0
 6fe:	0f 90       	pop	r0
 700:	cf 91       	pop	r28
 702:	df 91       	pop	r29
 704:	08 95       	ret

00000706 <DIO_writeHalfPort>:
void DIO_writeHalfPort(EN_port port,uint8_t data,EN_part part)
{
 706:	df 93       	push	r29
 708:	cf 93       	push	r28
 70a:	00 d0       	rcall	.+0      	; 0x70c <DIO_writeHalfPort+0x6>
 70c:	0f 92       	push	r0
 70e:	cd b7       	in	r28, 0x3d	; 61
 710:	de b7       	in	r29, 0x3e	; 62
 712:	89 83       	std	Y+1, r24	; 0x01
 714:	6a 83       	std	Y+2, r22	; 0x02
 716:	4b 83       	std	Y+3, r20	; 0x03
	if (port ==A)
 718:	89 81       	ldd	r24, Y+1	; 0x01
 71a:	88 23       	and	r24, r24
 71c:	11 f5       	brne	.+68     	; 0x762 <DIO_writeHalfPort+0x5c>
	{
		if(part==UPPER)
 71e:	8b 81       	ldd	r24, Y+3	; 0x03
 720:	88 23       	and	r24, r24
 722:	99 f4       	brne	.+38     	; 0x74a <DIO_writeHalfPort+0x44>
		{
			PORTA = (PORTA & 0x0F) | data<<4;
 724:	ab e3       	ldi	r26, 0x3B	; 59
 726:	b0 e0       	ldi	r27, 0x00	; 0
 728:	eb e3       	ldi	r30, 0x3B	; 59
 72a:	f0 e0       	ldi	r31, 0x00	; 0
 72c:	80 81       	ld	r24, Z
 72e:	28 2f       	mov	r18, r24
 730:	2f 70       	andi	r18, 0x0F	; 15
 732:	8a 81       	ldd	r24, Y+2	; 0x02
 734:	88 2f       	mov	r24, r24
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	82 95       	swap	r24
 73a:	92 95       	swap	r25
 73c:	90 7f       	andi	r25, 0xF0	; 240
 73e:	98 27       	eor	r25, r24
 740:	80 7f       	andi	r24, 0xF0	; 240
 742:	98 27       	eor	r25, r24
 744:	82 2b       	or	r24, r18
 746:	8c 93       	st	X, r24
 748:	77 c0       	rjmp	.+238    	; 0x838 <DIO_writeHalfPort+0x132>
		}
		else
		{
			PORTA = (PORTA & 0xF0) | (data & 0x0F) ;
 74a:	ab e3       	ldi	r26, 0x3B	; 59
 74c:	b0 e0       	ldi	r27, 0x00	; 0
 74e:	eb e3       	ldi	r30, 0x3B	; 59
 750:	f0 e0       	ldi	r31, 0x00	; 0
 752:	80 81       	ld	r24, Z
 754:	98 2f       	mov	r25, r24
 756:	90 7f       	andi	r25, 0xF0	; 240
 758:	8a 81       	ldd	r24, Y+2	; 0x02
 75a:	8f 70       	andi	r24, 0x0F	; 15
 75c:	89 2b       	or	r24, r25
 75e:	8c 93       	st	X, r24
 760:	6b c0       	rjmp	.+214    	; 0x838 <DIO_writeHalfPort+0x132>
		}

	}
	else if (port ==B)
 762:	89 81       	ldd	r24, Y+1	; 0x01
 764:	81 30       	cpi	r24, 0x01	; 1
 766:	11 f5       	brne	.+68     	; 0x7ac <DIO_writeHalfPort+0xa6>
	{
		if(part==UPPER)
 768:	8b 81       	ldd	r24, Y+3	; 0x03
 76a:	88 23       	and	r24, r24
 76c:	99 f4       	brne	.+38     	; 0x794 <DIO_writeHalfPort+0x8e>
		{
			PORTB = (PORTB & 0x0F) | data<<4;
 76e:	a8 e3       	ldi	r26, 0x38	; 56
 770:	b0 e0       	ldi	r27, 0x00	; 0
 772:	e8 e3       	ldi	r30, 0x38	; 56
 774:	f0 e0       	ldi	r31, 0x00	; 0
 776:	80 81       	ld	r24, Z
 778:	28 2f       	mov	r18, r24
 77a:	2f 70       	andi	r18, 0x0F	; 15
 77c:	8a 81       	ldd	r24, Y+2	; 0x02
 77e:	88 2f       	mov	r24, r24
 780:	90 e0       	ldi	r25, 0x00	; 0
 782:	82 95       	swap	r24
 784:	92 95       	swap	r25
 786:	90 7f       	andi	r25, 0xF0	; 240
 788:	98 27       	eor	r25, r24
 78a:	80 7f       	andi	r24, 0xF0	; 240
 78c:	98 27       	eor	r25, r24
 78e:	82 2b       	or	r24, r18
 790:	8c 93       	st	X, r24
 792:	52 c0       	rjmp	.+164    	; 0x838 <DIO_writeHalfPort+0x132>
		}
		else
		{
			PORTB = (PORTB & 0xF0) | (data & 0x0F) ;
 794:	a8 e3       	ldi	r26, 0x38	; 56
 796:	b0 e0       	ldi	r27, 0x00	; 0
 798:	e8 e3       	ldi	r30, 0x38	; 56
 79a:	f0 e0       	ldi	r31, 0x00	; 0
 79c:	80 81       	ld	r24, Z
 79e:	98 2f       	mov	r25, r24
 7a0:	90 7f       	andi	r25, 0xF0	; 240
 7a2:	8a 81       	ldd	r24, Y+2	; 0x02
 7a4:	8f 70       	andi	r24, 0x0F	; 15
 7a6:	89 2b       	or	r24, r25
 7a8:	8c 93       	st	X, r24
 7aa:	46 c0       	rjmp	.+140    	; 0x838 <DIO_writeHalfPort+0x132>
		}
	}
	else if(port ==C)
 7ac:	89 81       	ldd	r24, Y+1	; 0x01
 7ae:	82 30       	cpi	r24, 0x02	; 2
 7b0:	11 f5       	brne	.+68     	; 0x7f6 <DIO_writeHalfPort+0xf0>
	{
		if(part==UPPER)
 7b2:	8b 81       	ldd	r24, Y+3	; 0x03
 7b4:	88 23       	and	r24, r24
 7b6:	99 f4       	brne	.+38     	; 0x7de <DIO_writeHalfPort+0xd8>
		{
			PORTC = (PORTC & 0x0F) | data<<4;
 7b8:	a5 e3       	ldi	r26, 0x35	; 53
 7ba:	b0 e0       	ldi	r27, 0x00	; 0
 7bc:	e5 e3       	ldi	r30, 0x35	; 53
 7be:	f0 e0       	ldi	r31, 0x00	; 0
 7c0:	80 81       	ld	r24, Z
 7c2:	28 2f       	mov	r18, r24
 7c4:	2f 70       	andi	r18, 0x0F	; 15
 7c6:	8a 81       	ldd	r24, Y+2	; 0x02
 7c8:	88 2f       	mov	r24, r24
 7ca:	90 e0       	ldi	r25, 0x00	; 0
 7cc:	82 95       	swap	r24
 7ce:	92 95       	swap	r25
 7d0:	90 7f       	andi	r25, 0xF0	; 240
 7d2:	98 27       	eor	r25, r24
 7d4:	80 7f       	andi	r24, 0xF0	; 240
 7d6:	98 27       	eor	r25, r24
 7d8:	82 2b       	or	r24, r18
 7da:	8c 93       	st	X, r24
 7dc:	2d c0       	rjmp	.+90     	; 0x838 <DIO_writeHalfPort+0x132>
		}
		else
		{
			PORTC = (PORTC & 0xF0) | (data & 0x0F) ;
 7de:	a5 e3       	ldi	r26, 0x35	; 53
 7e0:	b0 e0       	ldi	r27, 0x00	; 0
 7e2:	e5 e3       	ldi	r30, 0x35	; 53
 7e4:	f0 e0       	ldi	r31, 0x00	; 0
 7e6:	80 81       	ld	r24, Z
 7e8:	98 2f       	mov	r25, r24
 7ea:	90 7f       	andi	r25, 0xF0	; 240
 7ec:	8a 81       	ldd	r24, Y+2	; 0x02
 7ee:	8f 70       	andi	r24, 0x0F	; 15
 7f0:	89 2b       	or	r24, r25
 7f2:	8c 93       	st	X, r24
 7f4:	21 c0       	rjmp	.+66     	; 0x838 <DIO_writeHalfPort+0x132>
		}
	}
	else
	{
		if(part==UPPER)
 7f6:	8b 81       	ldd	r24, Y+3	; 0x03
 7f8:	88 23       	and	r24, r24
 7fa:	99 f4       	brne	.+38     	; 0x822 <DIO_writeHalfPort+0x11c>
		{
			PORTD = (PORTD & 0x0F) | data<<4;
 7fc:	a2 e3       	ldi	r26, 0x32	; 50
 7fe:	b0 e0       	ldi	r27, 0x00	; 0
 800:	e2 e3       	ldi	r30, 0x32	; 50
 802:	f0 e0       	ldi	r31, 0x00	; 0
 804:	80 81       	ld	r24, Z
 806:	28 2f       	mov	r18, r24
 808:	2f 70       	andi	r18, 0x0F	; 15
 80a:	8a 81       	ldd	r24, Y+2	; 0x02
 80c:	88 2f       	mov	r24, r24
 80e:	90 e0       	ldi	r25, 0x00	; 0
 810:	82 95       	swap	r24
 812:	92 95       	swap	r25
 814:	90 7f       	andi	r25, 0xF0	; 240
 816:	98 27       	eor	r25, r24
 818:	80 7f       	andi	r24, 0xF0	; 240
 81a:	98 27       	eor	r25, r24
 81c:	82 2b       	or	r24, r18
 81e:	8c 93       	st	X, r24
 820:	0b c0       	rjmp	.+22     	; 0x838 <DIO_writeHalfPort+0x132>
		}
		else
		{
			PORTD = (PORTD & 0xF0) | (data & 0x0F) ;
 822:	a2 e3       	ldi	r26, 0x32	; 50
 824:	b0 e0       	ldi	r27, 0x00	; 0
 826:	e2 e3       	ldi	r30, 0x32	; 50
 828:	f0 e0       	ldi	r31, 0x00	; 0
 82a:	80 81       	ld	r24, Z
 82c:	98 2f       	mov	r25, r24
 82e:	90 7f       	andi	r25, 0xF0	; 240
 830:	8a 81       	ldd	r24, Y+2	; 0x02
 832:	8f 70       	andi	r24, 0x0F	; 15
 834:	89 2b       	or	r24, r25
 836:	8c 93       	st	X, r24
		}
	}
}
 838:	0f 90       	pop	r0
 83a:	0f 90       	pop	r0
 83c:	0f 90       	pop	r0
 83e:	cf 91       	pop	r28
 840:	df 91       	pop	r29
 842:	08 95       	ret

00000844 <DIO_read>:
uint8_t DIO_read(EN_port port,uint8_t pin)
{
 844:	df 93       	push	r29
 846:	cf 93       	push	r28
 848:	00 d0       	rcall	.+0      	; 0x84a <DIO_read+0x6>
 84a:	0f 92       	push	r0
 84c:	cd b7       	in	r28, 0x3d	; 61
 84e:	de b7       	in	r29, 0x3e	; 62
 850:	8a 83       	std	Y+2, r24	; 0x02
 852:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t data;
	if (port ==A)
 854:	8a 81       	ldd	r24, Y+2	; 0x02
 856:	88 23       	and	r24, r24
 858:	91 f4       	brne	.+36     	; 0x87e <DIO_read+0x3a>
	{
		data = BIT_IS_SET(PINA,pin);
 85a:	e9 e3       	ldi	r30, 0x39	; 57
 85c:	f0 e0       	ldi	r31, 0x00	; 0
 85e:	80 81       	ld	r24, Z
 860:	48 2f       	mov	r20, r24
 862:	8b 81       	ldd	r24, Y+3	; 0x03
 864:	28 2f       	mov	r18, r24
 866:	30 e0       	ldi	r19, 0x00	; 0
 868:	81 e0       	ldi	r24, 0x01	; 1
 86a:	90 e0       	ldi	r25, 0x00	; 0
 86c:	02 2e       	mov	r0, r18
 86e:	02 c0       	rjmp	.+4      	; 0x874 <DIO_read+0x30>
 870:	88 0f       	add	r24, r24
 872:	99 1f       	adc	r25, r25
 874:	0a 94       	dec	r0
 876:	e2 f7       	brpl	.-8      	; 0x870 <DIO_read+0x2c>
 878:	84 23       	and	r24, r20
 87a:	89 83       	std	Y+1, r24	; 0x01
 87c:	3b c0       	rjmp	.+118    	; 0x8f4 <DIO_read+0xb0>
	}
	else if (port ==B)
 87e:	8a 81       	ldd	r24, Y+2	; 0x02
 880:	81 30       	cpi	r24, 0x01	; 1
 882:	91 f4       	brne	.+36     	; 0x8a8 <DIO_read+0x64>
	{
		data = BIT_IS_SET(PINB,pin);
 884:	e6 e3       	ldi	r30, 0x36	; 54
 886:	f0 e0       	ldi	r31, 0x00	; 0
 888:	80 81       	ld	r24, Z
 88a:	48 2f       	mov	r20, r24
 88c:	8b 81       	ldd	r24, Y+3	; 0x03
 88e:	28 2f       	mov	r18, r24
 890:	30 e0       	ldi	r19, 0x00	; 0
 892:	81 e0       	ldi	r24, 0x01	; 1
 894:	90 e0       	ldi	r25, 0x00	; 0
 896:	02 2e       	mov	r0, r18
 898:	02 c0       	rjmp	.+4      	; 0x89e <DIO_read+0x5a>
 89a:	88 0f       	add	r24, r24
 89c:	99 1f       	adc	r25, r25
 89e:	0a 94       	dec	r0
 8a0:	e2 f7       	brpl	.-8      	; 0x89a <DIO_read+0x56>
 8a2:	84 23       	and	r24, r20
 8a4:	89 83       	std	Y+1, r24	; 0x01
 8a6:	26 c0       	rjmp	.+76     	; 0x8f4 <DIO_read+0xb0>
	}
	else if(port ==C)
 8a8:	8a 81       	ldd	r24, Y+2	; 0x02
 8aa:	82 30       	cpi	r24, 0x02	; 2
 8ac:	91 f4       	brne	.+36     	; 0x8d2 <DIO_read+0x8e>
	{
		data = BIT_IS_SET(PINC,pin);
 8ae:	e3 e3       	ldi	r30, 0x33	; 51
 8b0:	f0 e0       	ldi	r31, 0x00	; 0
 8b2:	80 81       	ld	r24, Z
 8b4:	48 2f       	mov	r20, r24
 8b6:	8b 81       	ldd	r24, Y+3	; 0x03
 8b8:	28 2f       	mov	r18, r24
 8ba:	30 e0       	ldi	r19, 0x00	; 0
 8bc:	81 e0       	ldi	r24, 0x01	; 1
 8be:	90 e0       	ldi	r25, 0x00	; 0
 8c0:	02 2e       	mov	r0, r18
 8c2:	02 c0       	rjmp	.+4      	; 0x8c8 <DIO_read+0x84>
 8c4:	88 0f       	add	r24, r24
 8c6:	99 1f       	adc	r25, r25
 8c8:	0a 94       	dec	r0
 8ca:	e2 f7       	brpl	.-8      	; 0x8c4 <DIO_read+0x80>
 8cc:	84 23       	and	r24, r20
 8ce:	89 83       	std	Y+1, r24	; 0x01
 8d0:	11 c0       	rjmp	.+34     	; 0x8f4 <DIO_read+0xb0>
	}
	else
	{
		data = BIT_IS_SET(PIND,pin);
 8d2:	e0 e3       	ldi	r30, 0x30	; 48
 8d4:	f0 e0       	ldi	r31, 0x00	; 0
 8d6:	80 81       	ld	r24, Z
 8d8:	48 2f       	mov	r20, r24
 8da:	8b 81       	ldd	r24, Y+3	; 0x03
 8dc:	28 2f       	mov	r18, r24
 8de:	30 e0       	ldi	r19, 0x00	; 0
 8e0:	81 e0       	ldi	r24, 0x01	; 1
 8e2:	90 e0       	ldi	r25, 0x00	; 0
 8e4:	02 2e       	mov	r0, r18
 8e6:	02 c0       	rjmp	.+4      	; 0x8ec <DIO_read+0xa8>
 8e8:	88 0f       	add	r24, r24
 8ea:	99 1f       	adc	r25, r25
 8ec:	0a 94       	dec	r0
 8ee:	e2 f7       	brpl	.-8      	; 0x8e8 <DIO_read+0xa4>
 8f0:	84 23       	and	r24, r20
 8f2:	89 83       	std	Y+1, r24	; 0x01
	}
	return data;
 8f4:	89 81       	ldd	r24, Y+1	; 0x01
}
 8f6:	0f 90       	pop	r0
 8f8:	0f 90       	pop	r0
 8fa:	0f 90       	pop	r0
 8fc:	cf 91       	pop	r28
 8fe:	df 91       	pop	r29
 900:	08 95       	ret

00000902 <DIO_toggle>:

void DIO_toggle(EN_port port,uint8_t pin)
{
 902:	df 93       	push	r29
 904:	cf 93       	push	r28
 906:	00 d0       	rcall	.+0      	; 0x908 <DIO_toggle+0x6>
 908:	cd b7       	in	r28, 0x3d	; 61
 90a:	de b7       	in	r29, 0x3e	; 62
 90c:	89 83       	std	Y+1, r24	; 0x01
 90e:	6a 83       	std	Y+2, r22	; 0x02
	if (port ==A)
 910:	89 81       	ldd	r24, Y+1	; 0x01
 912:	88 23       	and	r24, r24
 914:	a1 f4       	brne	.+40     	; 0x93e <DIO_toggle+0x3c>
	{
		TOGGLE_BIT(PORTA,pin);
 916:	ab e3       	ldi	r26, 0x3B	; 59
 918:	b0 e0       	ldi	r27, 0x00	; 0
 91a:	eb e3       	ldi	r30, 0x3B	; 59
 91c:	f0 e0       	ldi	r31, 0x00	; 0
 91e:	80 81       	ld	r24, Z
 920:	48 2f       	mov	r20, r24
 922:	8a 81       	ldd	r24, Y+2	; 0x02
 924:	28 2f       	mov	r18, r24
 926:	30 e0       	ldi	r19, 0x00	; 0
 928:	81 e0       	ldi	r24, 0x01	; 1
 92a:	90 e0       	ldi	r25, 0x00	; 0
 92c:	02 2e       	mov	r0, r18
 92e:	02 c0       	rjmp	.+4      	; 0x934 <DIO_toggle+0x32>
 930:	88 0f       	add	r24, r24
 932:	99 1f       	adc	r25, r25
 934:	0a 94       	dec	r0
 936:	e2 f7       	brpl	.-8      	; 0x930 <DIO_toggle+0x2e>
 938:	84 27       	eor	r24, r20
 93a:	8c 93       	st	X, r24
 93c:	41 c0       	rjmp	.+130    	; 0x9c0 <DIO_toggle+0xbe>
	}
	else if (port ==B)
 93e:	89 81       	ldd	r24, Y+1	; 0x01
 940:	81 30       	cpi	r24, 0x01	; 1
 942:	a1 f4       	brne	.+40     	; 0x96c <DIO_toggle+0x6a>
	{
		TOGGLE_BIT(PORTB,pin);
 944:	a8 e3       	ldi	r26, 0x38	; 56
 946:	b0 e0       	ldi	r27, 0x00	; 0
 948:	e8 e3       	ldi	r30, 0x38	; 56
 94a:	f0 e0       	ldi	r31, 0x00	; 0
 94c:	80 81       	ld	r24, Z
 94e:	48 2f       	mov	r20, r24
 950:	8a 81       	ldd	r24, Y+2	; 0x02
 952:	28 2f       	mov	r18, r24
 954:	30 e0       	ldi	r19, 0x00	; 0
 956:	81 e0       	ldi	r24, 0x01	; 1
 958:	90 e0       	ldi	r25, 0x00	; 0
 95a:	02 2e       	mov	r0, r18
 95c:	02 c0       	rjmp	.+4      	; 0x962 <DIO_toggle+0x60>
 95e:	88 0f       	add	r24, r24
 960:	99 1f       	adc	r25, r25
 962:	0a 94       	dec	r0
 964:	e2 f7       	brpl	.-8      	; 0x95e <DIO_toggle+0x5c>
 966:	84 27       	eor	r24, r20
 968:	8c 93       	st	X, r24
 96a:	2a c0       	rjmp	.+84     	; 0x9c0 <DIO_toggle+0xbe>
	}
	else if(port ==C)
 96c:	89 81       	ldd	r24, Y+1	; 0x01
 96e:	82 30       	cpi	r24, 0x02	; 2
 970:	a1 f4       	brne	.+40     	; 0x99a <DIO_toggle+0x98>
	{
		TOGGLE_BIT(PORTC,pin);
 972:	a5 e3       	ldi	r26, 0x35	; 53
 974:	b0 e0       	ldi	r27, 0x00	; 0
 976:	e5 e3       	ldi	r30, 0x35	; 53
 978:	f0 e0       	ldi	r31, 0x00	; 0
 97a:	80 81       	ld	r24, Z
 97c:	48 2f       	mov	r20, r24
 97e:	8a 81       	ldd	r24, Y+2	; 0x02
 980:	28 2f       	mov	r18, r24
 982:	30 e0       	ldi	r19, 0x00	; 0
 984:	81 e0       	ldi	r24, 0x01	; 1
 986:	90 e0       	ldi	r25, 0x00	; 0
 988:	02 2e       	mov	r0, r18
 98a:	02 c0       	rjmp	.+4      	; 0x990 <DIO_toggle+0x8e>
 98c:	88 0f       	add	r24, r24
 98e:	99 1f       	adc	r25, r25
 990:	0a 94       	dec	r0
 992:	e2 f7       	brpl	.-8      	; 0x98c <DIO_toggle+0x8a>
 994:	84 27       	eor	r24, r20
 996:	8c 93       	st	X, r24
 998:	13 c0       	rjmp	.+38     	; 0x9c0 <DIO_toggle+0xbe>
	}
	else
	{
		TOGGLE_BIT(PORTD,pin);
 99a:	a2 e3       	ldi	r26, 0x32	; 50
 99c:	b0 e0       	ldi	r27, 0x00	; 0
 99e:	e2 e3       	ldi	r30, 0x32	; 50
 9a0:	f0 e0       	ldi	r31, 0x00	; 0
 9a2:	80 81       	ld	r24, Z
 9a4:	48 2f       	mov	r20, r24
 9a6:	8a 81       	ldd	r24, Y+2	; 0x02
 9a8:	28 2f       	mov	r18, r24
 9aa:	30 e0       	ldi	r19, 0x00	; 0
 9ac:	81 e0       	ldi	r24, 0x01	; 1
 9ae:	90 e0       	ldi	r25, 0x00	; 0
 9b0:	02 2e       	mov	r0, r18
 9b2:	02 c0       	rjmp	.+4      	; 0x9b8 <DIO_toggle+0xb6>
 9b4:	88 0f       	add	r24, r24
 9b6:	99 1f       	adc	r25, r25
 9b8:	0a 94       	dec	r0
 9ba:	e2 f7       	brpl	.-8      	; 0x9b4 <DIO_toggle+0xb2>
 9bc:	84 27       	eor	r24, r20
 9be:	8c 93       	st	X, r24
	}
}
 9c0:	0f 90       	pop	r0
 9c2:	0f 90       	pop	r0
 9c4:	cf 91       	pop	r28
 9c6:	df 91       	pop	r29
 9c8:	08 95       	ret

000009ca <main>:

#include "spi.h"
#include "dio.h"

int main(void)
{
 9ca:	df 93       	push	r29
 9cc:	cf 93       	push	r28
 9ce:	00 d0       	rcall	.+0      	; 0x9d0 <main+0x6>
 9d0:	cd b7       	in	r28, 0x3d	; 61
 9d2:	de b7       	in	r29, 0x3e	; 62
	SPI_initSlave();
 9d4:	0e 94 44 05 	call	0xa88	; 0xa88 <SPI_initSlave>
	uint16_t data;
	DIO_initPort(A,OUTPUT);
 9d8:	80 e0       	ldi	r24, 0x00	; 0
 9da:	61 e0       	ldi	r22, 0x01	; 1
 9dc:	0e 94 4c 01 	call	0x298	; 0x298 <DIO_initPort>

	while(1)
	{
		data = SPI_receiveByte();
 9e0:	0e 94 7e 05 	call	0xafc	; 0xafc <SPI_receiveByte>
 9e4:	88 2f       	mov	r24, r24
 9e6:	90 e0       	ldi	r25, 0x00	; 0
 9e8:	9a 83       	std	Y+2, r25	; 0x02
 9ea:	89 83       	std	Y+1, r24	; 0x01
		PORTA = data;
 9ec:	eb e3       	ldi	r30, 0x3B	; 59
 9ee:	f0 e0       	ldi	r31, 0x00	; 0
 9f0:	89 81       	ldd	r24, Y+1	; 0x01
 9f2:	80 83       	st	Z, r24
 9f4:	f5 cf       	rjmp	.-22     	; 0x9e0 <main+0x16>

000009f6 <SPI_initMaster>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void SPI_initMaster(ST_SPI_config_t* config)
{
 9f6:	df 93       	push	r29
 9f8:	cf 93       	push	r28
 9fa:	00 d0       	rcall	.+0      	; 0x9fc <SPI_initMaster+0x6>
 9fc:	0f 92       	push	r0
 9fe:	cd b7       	in	r28, 0x3d	; 61
 a00:	de b7       	in	r29, 0x3e	; 62
 a02:	9b 83       	std	Y+3, r25	; 0x03
 a04:	8a 83       	std	Y+2, r24	; 0x02
	EN_prescalar prescalar = config->prescalar;
 a06:	ea 81       	ldd	r30, Y+2	; 0x02
 a08:	fb 81       	ldd	r31, Y+3	; 0x03
 a0a:	80 81       	ld	r24, Z
 a0c:	89 83       	std	Y+1, r24	; 0x01
	SPCR |= (prescalar & 0x03);
 a0e:	ad e2       	ldi	r26, 0x2D	; 45
 a10:	b0 e0       	ldi	r27, 0x00	; 0
 a12:	ed e2       	ldi	r30, 0x2D	; 45
 a14:	f0 e0       	ldi	r31, 0x00	; 0
 a16:	80 81       	ld	r24, Z
 a18:	98 2f       	mov	r25, r24
 a1a:	89 81       	ldd	r24, Y+1	; 0x01
 a1c:	83 70       	andi	r24, 0x03	; 3
 a1e:	89 2b       	or	r24, r25
 a20:	8c 93       	st	X, r24

	if (prescalar >= 4) /*SPI2X = 1 */
 a22:	89 81       	ldd	r24, Y+1	; 0x01
 a24:	84 30       	cpi	r24, 0x04	; 4
 a26:	38 f0       	brcs	.+14     	; 0xa36 <SPI_initMaster+0x40>
	{
		SPSR |= 1<<0;
 a28:	ae e2       	ldi	r26, 0x2E	; 46
 a2a:	b0 e0       	ldi	r27, 0x00	; 0
 a2c:	ee e2       	ldi	r30, 0x2E	; 46
 a2e:	f0 e0       	ldi	r31, 0x00	; 0
 a30:	80 81       	ld	r24, Z
 a32:	81 60       	ori	r24, 0x01	; 1
 a34:	8c 93       	st	X, r24
	}
	SET_BIT(DDRB,4 );
 a36:	a7 e3       	ldi	r26, 0x37	; 55
 a38:	b0 e0       	ldi	r27, 0x00	; 0
 a3a:	e7 e3       	ldi	r30, 0x37	; 55
 a3c:	f0 e0       	ldi	r31, 0x00	; 0
 a3e:	80 81       	ld	r24, Z
 a40:	80 61       	ori	r24, 0x10	; 16
 a42:	8c 93       	st	X, r24
	SET_BIT(DDRB,5 );
 a44:	a7 e3       	ldi	r26, 0x37	; 55
 a46:	b0 e0       	ldi	r27, 0x00	; 0
 a48:	e7 e3       	ldi	r30, 0x37	; 55
 a4a:	f0 e0       	ldi	r31, 0x00	; 0
 a4c:	80 81       	ld	r24, Z
 a4e:	80 62       	ori	r24, 0x20	; 32
 a50:	8c 93       	st	X, r24
	CLEAR_BIT(DDRB,6 );
 a52:	a7 e3       	ldi	r26, 0x37	; 55
 a54:	b0 e0       	ldi	r27, 0x00	; 0
 a56:	e7 e3       	ldi	r30, 0x37	; 55
 a58:	f0 e0       	ldi	r31, 0x00	; 0
 a5a:	80 81       	ld	r24, Z
 a5c:	8f 7b       	andi	r24, 0xBF	; 191
 a5e:	8c 93       	st	X, r24
	SET_BIT(DDRB,7 );
 a60:	a7 e3       	ldi	r26, 0x37	; 55
 a62:	b0 e0       	ldi	r27, 0x00	; 0
 a64:	e7 e3       	ldi	r30, 0x37	; 55
 a66:	f0 e0       	ldi	r31, 0x00	; 0
 a68:	80 81       	ld	r24, Z
 a6a:	80 68       	ori	r24, 0x80	; 128
 a6c:	8c 93       	st	X, r24

	SPCR |= (1<<SPE)|(1<<MSTR); // enable SPI + enable Master + choose SPI clock = Fosc/4
 a6e:	ad e2       	ldi	r26, 0x2D	; 45
 a70:	b0 e0       	ldi	r27, 0x00	; 0
 a72:	ed e2       	ldi	r30, 0x2D	; 45
 a74:	f0 e0       	ldi	r31, 0x00	; 0
 a76:	80 81       	ld	r24, Z
 a78:	80 65       	ori	r24, 0x50	; 80
 a7a:	8c 93       	st	X, r24
}
 a7c:	0f 90       	pop	r0
 a7e:	0f 90       	pop	r0
 a80:	0f 90       	pop	r0
 a82:	cf 91       	pop	r28
 a84:	df 91       	pop	r29
 a86:	08 95       	ret

00000a88 <SPI_initSlave>:

void SPI_initSlave(void)
{
 a88:	df 93       	push	r29
 a8a:	cf 93       	push	r28
 a8c:	cd b7       	in	r28, 0x3d	; 61
 a8e:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(DDRB,4 );
 a90:	a7 e3       	ldi	r26, 0x37	; 55
 a92:	b0 e0       	ldi	r27, 0x00	; 0
 a94:	e7 e3       	ldi	r30, 0x37	; 55
 a96:	f0 e0       	ldi	r31, 0x00	; 0
 a98:	80 81       	ld	r24, Z
 a9a:	8f 7e       	andi	r24, 0xEF	; 239
 a9c:	8c 93       	st	X, r24
	CLEAR_BIT(DDRB,5 );
 a9e:	a7 e3       	ldi	r26, 0x37	; 55
 aa0:	b0 e0       	ldi	r27, 0x00	; 0
 aa2:	e7 e3       	ldi	r30, 0x37	; 55
 aa4:	f0 e0       	ldi	r31, 0x00	; 0
 aa6:	80 81       	ld	r24, Z
 aa8:	8f 7d       	andi	r24, 0xDF	; 223
 aaa:	8c 93       	st	X, r24
	SET_BIT(DDRB,6 );
 aac:	a7 e3       	ldi	r26, 0x37	; 55
 aae:	b0 e0       	ldi	r27, 0x00	; 0
 ab0:	e7 e3       	ldi	r30, 0x37	; 55
 ab2:	f0 e0       	ldi	r31, 0x00	; 0
 ab4:	80 81       	ld	r24, Z
 ab6:	80 64       	ori	r24, 0x40	; 64
 ab8:	8c 93       	st	X, r24
	CLEAR_BIT(DDRB,7 );
 aba:	a7 e3       	ldi	r26, 0x37	; 55
 abc:	b0 e0       	ldi	r27, 0x00	; 0
 abe:	e7 e3       	ldi	r30, 0x37	; 55
 ac0:	f0 e0       	ldi	r31, 0x00	; 0
 ac2:	80 81       	ld	r24, Z
 ac4:	8f 77       	andi	r24, 0x7F	; 127
 ac6:	8c 93       	st	X, r24
	SPCR = 1<<SPE ; // enable SPI + choose SPI clock = Fosc/4
 ac8:	ed e2       	ldi	r30, 0x2D	; 45
 aca:	f0 e0       	ldi	r31, 0x00	; 0
 acc:	80 e4       	ldi	r24, 0x40	; 64
 ace:	80 83       	st	Z, r24
}
 ad0:	cf 91       	pop	r28
 ad2:	df 91       	pop	r29
 ad4:	08 95       	ret

00000ad6 <SPI_sendByte>:

void SPI_sendByte(const uint8_t data)
{
 ad6:	df 93       	push	r29
 ad8:	cf 93       	push	r28
 ada:	0f 92       	push	r0
 adc:	cd b7       	in	r28, 0x3d	; 61
 ade:	de b7       	in	r29, 0x3e	; 62
 ae0:	89 83       	std	Y+1, r24	; 0x01
	SPDR=data;
 ae2:	ef e2       	ldi	r30, 0x2F	; 47
 ae4:	f0 e0       	ldi	r31, 0x00	; 0
 ae6:	89 81       	ldd	r24, Y+1	; 0x01
 ae8:	80 83       	st	Z, r24
	while(BIT_IS_CLEAR(SPSR,SPIF));
 aea:	ee e2       	ldi	r30, 0x2E	; 46
 aec:	f0 e0       	ldi	r31, 0x00	; 0
 aee:	80 81       	ld	r24, Z
 af0:	88 23       	and	r24, r24
 af2:	dc f7       	brge	.-10     	; 0xaea <SPI_sendByte+0x14>
}
 af4:	0f 90       	pop	r0
 af6:	cf 91       	pop	r28
 af8:	df 91       	pop	r29
 afa:	08 95       	ret

00000afc <SPI_receiveByte>:
uint8_t SPI_receiveByte(void)
{
 afc:	df 93       	push	r29
 afe:	cf 93       	push	r28
 b00:	cd b7       	in	r28, 0x3d	; 61
 b02:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(SPSR,SPIF));
 b04:	ee e2       	ldi	r30, 0x2E	; 46
 b06:	f0 e0       	ldi	r31, 0x00	; 0
 b08:	80 81       	ld	r24, Z
 b0a:	88 23       	and	r24, r24
 b0c:	dc f7       	brge	.-10     	; 0xb04 <SPI_receiveByte+0x8>
	return SPDR;
 b0e:	ef e2       	ldi	r30, 0x2F	; 47
 b10:	f0 e0       	ldi	r31, 0x00	; 0
 b12:	80 81       	ld	r24, Z
}
 b14:	cf 91       	pop	r28
 b16:	df 91       	pop	r29
 b18:	08 95       	ret

00000b1a <SPI_sendString>:

void SPI_sendString(const uint8_t * Str)
{
 b1a:	df 93       	push	r29
 b1c:	cf 93       	push	r28
 b1e:	00 d0       	rcall	.+0      	; 0xb20 <SPI_sendString+0x6>
 b20:	cd b7       	in	r28, 0x3d	; 61
 b22:	de b7       	in	r29, 0x3e	; 62
 b24:	9a 83       	std	Y+2, r25	; 0x02
 b26:	89 83       	std	Y+1, r24	; 0x01
 b28:	0a c0       	rjmp	.+20     	; 0xb3e <SPI_sendString+0x24>
	while(*Str != '\0')
	{
		SPI_sendByte(*Str);
 b2a:	e9 81       	ldd	r30, Y+1	; 0x01
 b2c:	fa 81       	ldd	r31, Y+2	; 0x02
 b2e:	80 81       	ld	r24, Z
 b30:	0e 94 6b 05 	call	0xad6	; 0xad6 <SPI_sendByte>
		Str++;
 b34:	89 81       	ldd	r24, Y+1	; 0x01
 b36:	9a 81       	ldd	r25, Y+2	; 0x02
 b38:	01 96       	adiw	r24, 0x01	; 1
 b3a:	9a 83       	std	Y+2, r25	; 0x02
 b3c:	89 83       	std	Y+1, r24	; 0x01
	return SPDR;
}

void SPI_sendString(const uint8_t * Str)
{
	while(*Str != '\0')
 b3e:	e9 81       	ldd	r30, Y+1	; 0x01
 b40:	fa 81       	ldd	r31, Y+2	; 0x02
 b42:	80 81       	ld	r24, Z
 b44:	88 23       	and	r24, r24
 b46:	89 f7       	brne	.-30     	; 0xb2a <SPI_sendString+0x10>
	{
		SPI_sendByte(*Str);
		Str++;
	}
}
 b48:	0f 90       	pop	r0
 b4a:	0f 90       	pop	r0
 b4c:	cf 91       	pop	r28
 b4e:	df 91       	pop	r29
 b50:	08 95       	ret

00000b52 <SPI_receiveString>:

void SPI_receiveString(uint8_t *Str)
{
 b52:	0f 93       	push	r16
 b54:	1f 93       	push	r17
 b56:	df 93       	push	r29
 b58:	cf 93       	push	r28
 b5a:	00 d0       	rcall	.+0      	; 0xb5c <SPI_receiveString+0xa>
 b5c:	0f 92       	push	r0
 b5e:	cd b7       	in	r28, 0x3d	; 61
 b60:	de b7       	in	r29, 0x3e	; 62
 b62:	9b 83       	std	Y+3, r25	; 0x03
 b64:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i=0;
 b66:	19 82       	std	Y+1, r1	; 0x01
	Str[i]=SPI_receiveByte();
 b68:	89 81       	ldd	r24, Y+1	; 0x01
 b6a:	28 2f       	mov	r18, r24
 b6c:	30 e0       	ldi	r19, 0x00	; 0
 b6e:	8a 81       	ldd	r24, Y+2	; 0x02
 b70:	9b 81       	ldd	r25, Y+3	; 0x03
 b72:	8c 01       	movw	r16, r24
 b74:	02 0f       	add	r16, r18
 b76:	13 1f       	adc	r17, r19
 b78:	0e 94 7e 05 	call	0xafc	; 0xafc <SPI_receiveByte>
 b7c:	f8 01       	movw	r30, r16
 b7e:	80 83       	st	Z, r24
 b80:	0f c0       	rjmp	.+30     	; 0xba0 <SPI_receiveString+0x4e>
	while ( Str[i] != '#')
	{
		i++;
 b82:	89 81       	ldd	r24, Y+1	; 0x01
 b84:	8f 5f       	subi	r24, 0xFF	; 255
 b86:	89 83       	std	Y+1, r24	; 0x01
		Str[i]=SPI_receiveByte();
 b88:	89 81       	ldd	r24, Y+1	; 0x01
 b8a:	28 2f       	mov	r18, r24
 b8c:	30 e0       	ldi	r19, 0x00	; 0
 b8e:	8a 81       	ldd	r24, Y+2	; 0x02
 b90:	9b 81       	ldd	r25, Y+3	; 0x03
 b92:	8c 01       	movw	r16, r24
 b94:	02 0f       	add	r16, r18
 b96:	13 1f       	adc	r17, r19
 b98:	0e 94 7e 05 	call	0xafc	; 0xafc <SPI_receiveByte>
 b9c:	f8 01       	movw	r30, r16
 b9e:	80 83       	st	Z, r24

void SPI_receiveString(uint8_t *Str)
{
	uint8_t i=0;
	Str[i]=SPI_receiveByte();
	while ( Str[i] != '#')
 ba0:	89 81       	ldd	r24, Y+1	; 0x01
 ba2:	28 2f       	mov	r18, r24
 ba4:	30 e0       	ldi	r19, 0x00	; 0
 ba6:	8a 81       	ldd	r24, Y+2	; 0x02
 ba8:	9b 81       	ldd	r25, Y+3	; 0x03
 baa:	fc 01       	movw	r30, r24
 bac:	e2 0f       	add	r30, r18
 bae:	f3 1f       	adc	r31, r19
 bb0:	80 81       	ld	r24, Z
 bb2:	83 32       	cpi	r24, 0x23	; 35
 bb4:	31 f7       	brne	.-52     	; 0xb82 <SPI_receiveString+0x30>
	{
		i++;
		Str[i]=SPI_receiveByte();
	}
	Str[i]='\0';
 bb6:	89 81       	ldd	r24, Y+1	; 0x01
 bb8:	28 2f       	mov	r18, r24
 bba:	30 e0       	ldi	r19, 0x00	; 0
 bbc:	8a 81       	ldd	r24, Y+2	; 0x02
 bbe:	9b 81       	ldd	r25, Y+3	; 0x03
 bc0:	fc 01       	movw	r30, r24
 bc2:	e2 0f       	add	r30, r18
 bc4:	f3 1f       	adc	r31, r19
 bc6:	10 82       	st	Z, r1
}
 bc8:	0f 90       	pop	r0
 bca:	0f 90       	pop	r0
 bcc:	0f 90       	pop	r0
 bce:	cf 91       	pop	r28
 bd0:	df 91       	pop	r29
 bd2:	1f 91       	pop	r17
 bd4:	0f 91       	pop	r16
 bd6:	08 95       	ret

00000bd8 <_exit>:
 bd8:	f8 94       	cli

00000bda <__stop_program>:
 bda:	ff cf       	rjmp	.-2      	; 0xbda <__stop_program>
